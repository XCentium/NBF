@using System.Web.Mvc.Html
@using Insite.WebFramework.Mvc.Extensions
@using Insite.WebFramework.Content
@using Insite.ContentLibrary.Pages
@using Insite.Core.Exceptions

@model Insite.WebFramework.ContentAdmin.Models.ContentItems.EditContentFieldModel<Extensions.Widgets.ContentFields.ListOfNewsPagesContentFieldAttribute>

    @helper RenderNode(AbstractPage abstractPage)
    {
    <li>
        @{if (abstractPage.Class.Equals("NewsPage") && !abstractPage.IsRetracted && abstractPage.PublishOn.HasValue && abstractPage.PublishOn <= DateTimeOffset.Now)
            {
                <a href="#" data-variantKey="@abstractPage.VariantKey">@abstractPage.Title</a>
            }
            var childPages = Content.GetChildPagesForVariantKey<AbstractPage>(abstractPage.VariantKey.Value).AllPages.Where(o => !(o is AbstractNavigationPage));
            if (childPages.Any())
            {
                <ul>
                    @foreach (var childPage in childPages)
                    {
                        @RenderNode(childPage)
                    }
                </ul>
            }
        }
    </li>
    }

    @helper Row(int variantKey, int x)
    {
        var pageName = "";
        if (variantKey != 0)
        {
            try
            {
                pageName = (Content.GetPageByVariantKey(variantKey).Page ?? new ContentPage()).Title;
            }
            catch (ContentVariantNotFoundException)
            {
                // in case page was removed
            }
        }

        <li data-pagerow="">
            <div class="cms-selectPageWrap">
                <input type="hidden" name="@(Model.FieldName + "[" + x + "]")" id="@(Model.FieldName + x)" value="@(variantKey == 0 ? "" : variantKey.ToString())" @if (Model.ContentFieldAttribute.IsRequired) { <text> data-val="true" data-val-required="Value is required" </text>     } />
                @*TODO CMS 3.7.1 This needs styling to replace the inline*@
                <input class="cms-selectPageName" type="text" name="pageName@(Model.FieldName + "[" + x + "]")" value="@pageName" readonly="readonly" disabled="disabled" style="width: 50%; float: left;" />
                <button class="cms-button cms-btn-primary cms-browse" data-rowIndex="@(x)" type="button">Browse</button>
                @*TODO CMS 3.7.1 if we have a clear function, it needs to set the value to 0/[blank] depending on if IsRequired is set*@
                <button class="cms-button cms-moveUp" type="button">Move Up</button>
                <button class="cms-button cms-moveDown" type="button">Move Down</button>
                <button class="cms-button cms-remove" type="button">Remove</button>
                <span data-valmsg-replace="true" data-valmsg-for="@(Model.FieldName + "[" + x + "]")"></span>
            </div>
        </li>
    }

        @{
            var values = Model.GetValue<IList<int>>();
        }

        <div class="cms-listEditor list-@Model.FieldName clearfix">
            <label for="@Model.FieldName">
                @Model.DisplayName
                @if (Model.ContentFieldAttribute.IsRequired)
                {
                    <span class="required">(required)</span>
                }
                @Html.Partial("ContentItemFields/_ContextDisplay", Model.ContentItemFieldModel)
            </label>

            <div class="cms-selectPageWrap" id="cms-selectPageWrap@(Model.FieldName)">
                <ul>
                    @for (var x = 0; x < values.Count(); x++)
                    {
                        @Row(values[x], x)
                    }
                    @if (!values.Any())
                    {
                        @Row(0, 0)
                    }
                    <li class="cms-buttonRow"><button class="cms-button cms-btn-secondary cms-add" type="button">Add</button></li>
                </ul>
                <div class="cms-selectPageHolder">
                    <input type="hidden" name="rowIndex@(Model.FieldName)" />
                    <ul style="">
                        @RenderNode(Content.GetPage<HomePage>().Page)
                    </ul>
                </div>
            </div>
        </div>

        @Html.Script(@<script>
            (function ($) {
                var $list = $(".list-@Model.FieldName");
                var fixRows = function () {
                    var $rows = $list.find("li[data-pageRow='']");
                    $rows.find("button").css("visibility", "visible");
                    $rows.filter(":first").find(".cms-moveUp").css("visibility", "hidden");
                    $rows.filter(":last").find(".cms-moveDown").css("visibility", "hidden");
                    if ($rows.length <= 1) {
                        $rows.find(".cms-remove").css("visibility", "hidden");
                    }
                    $rows.each(function (index) {
                        var $row = $(this);
                        $row.find('input[name ^= "pageName"]').attr("name", "pageName@(Model.FieldName)[" + index + "]");
                        $row.find('input[name ^= "@(Model.FieldName)"]').attr("name", "@(Model.FieldName)[" + index + "]");
                        $row.find('.cms-browse').attr("data-rowIndex", index);
                        $row.find("span").attr("data-valmsg-for", "@(Model.FieldName)[" + index + "]");
                    });

                    insite.contentAdmin.setupFormValidation($list.closest("form"));
                };
                fixRows();
                $list.on("click", ".cms-moveUp", function (e) {
                    e.preventDefault();
                    var $row = $(this).parents("li:first");
                    $row.insertBefore($row.prev());
                    fixRows();
                });
                $list.on("click", ".cms-moveDown", function (e) {
                    e.preventDefault();
                    var $row = $(this).parents("li:first");
                    $row.insertAfter($row.next());
                    fixRows();
                });
                $list.on("click", ".cms-remove", function (e) {
                    e.preventDefault();
                    $(this).parents("li:first").remove();
                    fixRows();
                });
                $list.on("click", ".cms-add", function (e) {
                    e.preventDefault();
                    var $clone = $list.find("ul li:first").clone();
                    $clone.find("input").val("");
                    $list.find("ul li.cms-buttonRow").before($clone);
                    fixRows();
                });
            })(jQuery);
    </script>)

        @Html.Script(
    @<script>
        (function () {
            $(".cms-selectPageHolder").on("click", "a", function (e) {
                var $this = $(this);
                var $selectPageWrap = $('[id ^= "cms-selectPageWrap@(Model.FieldName)"]');
                var rowIndex = $selectPageWrap.find("[name=rowIndex@(Model.FieldName)]").val();
                e.preventDefault();
                e.stopPropagation();
                $selectPageWrap.find(".cms-selectPageHolder").hide();
                $selectPageWrap.find('[name="@(Model.FieldName)[' + rowIndex + ']"]').val($this.attr("data-variantKey"));
                $selectPageWrap.find('[name="pageName@(Model.FieldName)[' + rowIndex + ']"]').val($this.text());
            });
            $("#cms-selectPageWrap@(Model.FieldName)").on("click", ".cms-browse", function (e) {
                var $this = $(this);
                var $selectPageRow = $this.closest(".cms-selectPageWrap");
                var $selectPageWrap = $('[id^="cms-selectPageWrap@(Model.FieldName)"]');

                var $selectPageHolder = $selectPageWrap.find(".cms-selectPageHolder");
                $selectPageHolder.css("top", $selectPageRow.offset().top - $selectPageWrap.offset().top + $selectPageRow.outerHeight() - 5);
                $selectPageHolder.show();

                $selectPageWrap.find("[name=rowIndex@(Model.FieldName)]").val($this.attr("data-rowIndex"));
                e.stopPropagation();
            });
            $(document).click(function (e) {
                $('[id ^= "cms-selectPageWrap@(Model.FieldName)"] .cms-selectPageHolder').hide();
            });
        })();
    </script>
)
